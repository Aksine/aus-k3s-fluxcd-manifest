
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: monitoring
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      chart: grafana
      version: 9.3.1
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3
  values:
    ingress:
      enabled: true

      annotations: {}

      labels: {}
      path: /

      # pathType is only for k8s >= 1.1=
      pathType: Prefix

      hosts:
        - monitor.aksine.lcl



      tls: []
    image:
      # -- The Docker registry
      registry: docker.io
      # -- Docker image repository
      repository: grafana/grafana
      # Overrides the Grafana image tag whose default is the chart appVersion
      tag: 12.0.4
      pullPolicy: Always 
    route:
      main:
        # -- Enables or disables the route
        enabled: false

        # -- Set the route apiVersion, e.g. gateway.networking.k8s.io/v1 or gateway.networking.k8s.io/v1alpha2
        apiVersion: gateway.networking.k8s.io/v1
        # -- Set the route kind
        # Valid options are GRPCRoute, HTTPRoute, TCPRoute, TLSRoute, UDPRoute
        kind: HTTPRoute

        annotations: {}
        labels: {}

        hostnames: []
        # - my-filter.example.com
        parentRefs: []
        # - name: acme-gw

        matches:
          - path:
              type: PathPrefix
              value: /

        ## Filters define the filters that are applied to requests that match this rule.
        filters: []

        ## Additional custom rules that can be added to the route
        additionalRules: []

    persistence:

      type: pvc
      enabled: true
      # storageClassName: default
      ## (Optional) Use this to bind the claim to an existing PersistentVolume (PV) by name.
      existingClaim: graf-pvc
      ## If persistence is not enabled, this allows to mount the
      ## local storage in-memory to improve performance
      ##
      # inMemory:
      #   enabled: true
      #   ## The maximum usage on memory medium EmptyDir would be
      #   ## the minimum value between the SizeLimit specified
      #   ## here and the sum of memory limits of all containers in a pod
      #   ##
      #   sizeLimit: 1024Mi




    # Use an existing secret for the admin user.
    admin:
      ## Name of the secret. Can be templated.
      existingSecret: graf-cred-secret
      userKey: user
      passwordKey: password





    ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
    ##
    ## `path` must be /var/lib/grafana/dashboards/<provider_name>
    ##
    dashboardProviders: {}
    #  dashboardproviders.yaml:
    #    apiVersion: 1
    #    providers:
    #    - name: 'default'
    #      orgId: 1
    #      folder: ''
    #      type: file
    #      disableDeletion: false
    #      editable: true
    #      options:
    #        path: /var/lib/grafana/dashboards/default

    ## Configure how curl fetches remote dashboards. The beginning dash is required.
    ## NOTE: This sets the default short flags for all dashboards, but these
    ##       defaults can be overridden individually for each dashboard by setting
    ##       curlOptions. See the example dashboards section below.
    ##
    ## -s  - silent mode
    ## -k  - allow insecure (eg: non-TLS) connections
    ## -f  - fail fast
    ## See the curl documentation for additional options
    ##
    defaultCurlOptions: "-skf"

    ## Configure grafana dashboard to import
    ## NOTE: To use dashboards you must also enable/configure dashboardProviders
    ## ref: https://grafana.com/dashboards
    ##
    ## dashboards per provider, use provider name as key.
    ##
    dashboards: {}
      # default:
      #   some-dashboard:
      #     json: |
      #       $RAW_JSON
      #   custom-dashboard:
      #     file: dashboards/custom-dashboard.json
      #   prometheus-stats:
      #     gnetId: 2
      #     revision: 2
      #     datasource: Prometheus
      #   local-dashboard:
      #     url: https://example.com/repository/test.json
      #     curlOptions: "-sLf"
      #     token: ''
      #   local-dashboard-base64:
      #     url: https://example.com/repository/test-b64.json
      #     token: ''
      #     b64content: true
      #   local-dashboard-gitlab:
      #     url: https://example.com/repository/test-gitlab.json
      #     gitlabToken: ''
      #   local-dashboard-bitbucket:
      #     url: https://example.com/repository/test-bitbucket.json
      #     bearerToken: ''
      #   local-dashboard-azure:
      #     url: https://example.com/repository/test-azure.json
      #     basic: ''
      #     acceptHeader: '*/*'

    ## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
    ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
    ## ConfigMap data example:
    ##
    ## data:
    ##   example-dashboard.json: |
    ##     RAW_JSON
    ##
    dashboardsConfigMaps: {}
    #  default: ""

    ## Grafana's primary configuration
    ## NOTE: values in map will be converted to ini format
    ## ref: http://docs.grafana.org/installation/configuration/
    ##
    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      analytics:
        check_for_updates: true
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      server:
        domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ tpl (.Values.ingress.hosts | first) . }}{{ else }}''{{ end }}"
